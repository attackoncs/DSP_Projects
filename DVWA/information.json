{"description":"Web application vulnerability","goal":"<p>Go to&nbsp;<a href=\"{{hostname}}:11110/DVWA\">{{hostname}}:11110/DVWA</a>&nbsp;and hack the site!</p>","solution":"<p>In this lab we are going to analyze 4 different vulnerabilities in web applications, the ones we are interested in are: command injection, sql injection, cross site forgery request and file inclusion. For each vulnerability, the method used to attack will be axplained and the used commands will be provided. The used environment to study these techniques is \"Damn Vulnerable Web Application (DVWA)\": a web application that lends itself to numerous attacks. For each type of vulnerability there will be three different difficulties (low, medium and high) that will be analyzed.</p>\n<h1 style=\"height: 18px; text-align: center;\">&nbsp;1&nbsp; <strong>Command Injection<br /></strong></h1>\n<p>&nbsp;</p>\n<p>The purpose of these attacks is to inject and execute commands in vulnerable applications, which act like a kind of command shell; to be specified that the commands are executed with the privileges, and within the environment, of the related web service. In general, web applications that allow the user to enter an input, without validating it, can be subject to this kind of attack. The syntax with which the commands are executed varies according to the operating system of the web server.</p>\n<h2 style=\"text-align: center;\"><strong>1.1&nbsp; Scenario \"Easy\"</strong></h2>\n<p>This scenario involves the insertion of an IP address that will be pinged by the server. First of all, we verify that the web application is susceptible to this kind of attack by inserting, after the IP address, a special character (such as \"&amp;\" or \"&amp;&amp;\") and examine the output:</p>\n<p style=\"text-align: left;\"><img src=\"https://github.com/Eman993/Images_NS/blob/master/1%20command%20injection/1%20easy/1easy.png?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p style=\"text-align: left;\">We note that the output, in addition to the ping result, returns the contents of the folder where the web app is located. This means that no check are made on the input and therefore the web application is vulnerable to command injection. So let's try to make a copy of the php configuratio file, with the following command:</p>\n<ul>\n<li style=\"text-align: left;\">&ldquo;127.0.0.1 &amp;&amp; cp ../../config/config.inc.php new.txt&rdquo;</li>\n</ul>\n<p style=\"text-align: left;\"><img src=\"https://github.com/Eman993/Images_NS/blob/master/1%20command%20injection/1%20easy/2easy.png?raw=true\" alt=\"\" width=\"1080\" height=\"608\" /></p>\n<p style=\"text-align: left;\"><img src=\"https://github.com/Eman993/Images_NS/blob/master/1%20command%20injection/1%20easy/3%20easy.jpg?raw=true\" alt=\"\" width=\"719\" height=\"720\" /></p>\n<h2 style=\"text-align: center;\">&nbsp;<strong>1.2&nbsp; Scenario \"Medium\"<br /></strong></h2>\n<p style=\"text-align: left;\">In this scenario some special charachters are filtered, so with the previous input we would not get anything:</p>\n<p style=\"text-align: left;\"><img src=\"https://github.com/Eman993/Images_NS/blob/master/1%20command%20injection/2%20medium/2%20medium.png?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p style=\"text-align: left;\">However, it is still possible to execute commands, in fact we can use othe special characters, such as \"|\":</p>\n<p style=\"text-align: left;\"><img src=\"https://github.com/Eman993/Images_NS/blob/master/1%20command%20injection/2%20medium/1%20medium.png?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<h2 style=\"text-align: center;\"><strong>1.3&nbsp; Scenario \"High\"</strong></h2>\n<p>In this scenario, even the previous input would not have worked well, since the special character would have been filtered:</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/1%20command%20injection/3%20hard/2.jpg?raw=true\" alt=\"\" width=\"958\" height=\"966\" /></p>\n<p>However, by omitting the space between the ip address and the special character it is still possible to obtain the desired result, with the command:</p>\n<ul>\n<li>&ldquo;127.0.0.1|ls&rdquo;;</li>\n</ul>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/1%20command%20injection/3%20hard/1hard.png?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<h1 style=\"text-align: center;\"><strong>2&nbsp; File inclusion</strong></h1>\n<p style=\"text-align: left;\">Typical vulnerabilities of web applications that use run-time scripts. Some web applications allow the user to specify the input that will be used directly to access executable code; in this way the attacker can control which file must be run at run time. The attacker's purpose is to execute unexpected code; the code can be local (Local file inclusion) or passed by the attacker (Remote file inclusion). In this scenario we will run code already present on the server (it has been loaded previously).</p>\n<h2 style=\"text-align: center;\"><strong>2.1 Scenario \"Easy\"</strong></h2>\n<p>Let's try to verify that the machin is vulnerable to this attack, requesting the page \"phpinfo.php\" with the following url:</p>\n<ul>\n<li>&ldquo;page=../../phpinfo.php&rdquo;;</li>\n</ul>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/2file%20inclusion/1%20easy/2easy.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p>No checks are made! So we can search for the file we want:</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/2file%20inclusion/1%20easy/3.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<h2 style=\"text-align: center;\"><strong>2.2&nbsp; Scenario \"Medium\"</strong></h2>\n<p style=\"text-align: left;\">In this scenario there's a little input validation:</p>\n<p style=\"text-align: left;\"><img src=\"https://github.com/Eman993/Images_NS/blob/master/2file%20inclusion/2%20medium/1medium.png?raw=true\" alt=\"\" width=\"602\" height=\"243\" /></p>\n<p style=\"text-align: left;\">The validation cuts some \"suspicious\" characters; however, it's easily avoidable with the following command:</p>\n<ul>\n<li style=\"text-align: left;\">&ldquo;page=..././..././hackable/flags/fi.php&rdquo;;</li>\n</ul>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/2file%20inclusion/2%20medium/2medium.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<h2 style=\"text-align: center;\"><strong>2.3&nbsp; Scenario \"High\"</strong></h2>\n<p>In this scenario, all requests that do not contain the string \"file\" are discarded, with the exception of the \"include.php\" file. This control is easily avoidable by simply inserting the string \"file\" at the beginning of the request:</p>\n<ul>\n<li>&ldquo;page=file:///etc/passwd&rdquo;;</li>\n</ul>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/2file%20inclusion/3%20hard/1hard.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<h1 style=\"text-align: center;\"><strong>3&nbsp; Cross site request forgery (CSRF)</strong></h1>\n<p>Vulnerability to which web applications, that receive requests from a client without particular mechanisms to check wheter the request was sent intentionally or not, are exposed. In this case, the \"trust\" of a site is exploited in a user's browser. To take full advantage of this vulnerability, social engineering techniques are usually used to find appropiate users of that website. In particular, if the victim is the administrator of the web application, this vulnerability could compromise the use of the web application itself.</p>\n<h2 style=\"text-align: center;\"><strong>3.1&nbsp; Scenario \"Easy\"</strong></h2>\n<p>This scenario does not include any control: it is possible to forge a URL that changes the user's password. To hide the content of the link, making unaware the user about the real content of the link itself, it is possible to use websites that shorten the url.</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/3%20csrf/1easy/1facile.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<h2 style=\"text-align: center;\"><strong>&nbsp;3.2&nbsp; Scenario \"Medium\"</strong></h2>\n<p>In this scenario there's a control that is used to understand where the last requested page comes from; the developer believes that if this corresponds to the current domain, then it must come from the web application and can be trusted. In fact, if we try to click the forged link, we get:</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/3%20csrf/2medium/1medium.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p>In this case, there is a need to exploit another vulnerability of the website, such as the \"stored XSS\": this vulnerability allows to inject code into the content of web app, so when a user visits the infected page, the script will be executed in your browser, clearly without your knowledge. In the example we inserted the link to change the password in the \"src field of the HTML image tag:</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/3%20csrf/2medium/3.jpg?raw=true\" alt=\"\" width=\"1080\" height=\"548\" /></p>\n<p>At this point, the user, by opening the (lawful) link in which the code was injected, will request to change the password with the values chosen by us.</p>\n<h2 style=\"text-align: center;\"><strong>3.3&nbsp; Scenario \"High\"</strong></h2>\n<p>In this scenari, an anti-CSRF token has been added. Again, another website vulnerability must be exploited in order to steal the victim's token.In this case, the \"DOM XSS\" vulnerability is exploited: the web application writes data within the DOM without making an appropiate sanitization. In fact, we use a Javascript script, preloaded on the server (using the upload vulnerability), which steals the client's token and changes his password.</p>\n<p>(script : h<a href=\"https://github.com/Eman993/Images_NS/blob/master/3%20csrf/3hard/script.js\">ttps://github.com/Eman993/Images_NS/blob/master/3%20csrf/3hard/script.js</a>):</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/3%20csrf/3hard/1hard.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/3%20csrf/3hard/3hard.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<h1 style=\"text-align: center;\"><strong>4&nbsp; SQL Injection</strong></h1>\n<p>This attack consists in the injection of SQL queries, through the input of the web app, from the client to the server. It is used to read sensitive data from the database, modify it, perform administrator operations on the database, take the contents of a cile on the DBMS system and, in some cases to send commands to the serber's operating system. In this case we will steal sensitive data (username and password) of the users registered in the database.</p>\n<h2 style=\"text-align: center;\"><strong>4.1&nbsp; Scenario \"Easy\"</strong></h2>\n<p>First of all, we check the presence of the vulnerability by writing the string \" 1' \":</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/4sqli/1easy/2easy.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p>This indicates that the web application is vulnerable to these attacks. We insert an always true statement (\"1=1\") and the final \"#\":</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/4sqli/1easy/3easy.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p>Now we look for sensitive data within the \"INFORMATION_SCHEMA.TABLES\" table (query in the image below):</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/4sqli/1easy/5.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p>We found that the users table is simply called \"users\"so we can make a query to see the stored username and password (query in the image below):</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/4sqli/1easy/6.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p>Passwords are not stored in clear, we need to decrypt their contents with an MD5 hash decrypter, which can be found easily online:</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/4sqli/1easy/7.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p>Here's the password for &ldquo;admin&rdquo; user.</p>\n<h2 style=\"text-align: center;\"><strong>4.2&nbsp; Scenario \"Medium\"</strong></h2>\n<p>In this scenario we have a \"mysqli_real_escape_string\" function that escapes special characters in the string that is used for the SQL statement.</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/4sqli/2medium/1.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p>Requests cannot be made directly, because the input is filtered; so we try to modify the data that is sent via the http post to the server. We use \"Burp\": a software that can intercept the requests before they are actually sent, thus giving the possibility to modify them.</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/4sqli/2medium/2.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p>In this way we obtain the previous error page and, similarly to the previous case, we manage to obtain sensitive data:</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/4sqli/2medium/8.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<h2 style=\"text-align: center;\"><strong>4.3&nbsp; Scenario \"High\"</strong></h2>\n<p>This scennario is very similar to the easy one, only that the attacker sends the data via a session variable using a different page, rather than making a direct GET request. The queries made here are the same as those made previously:</p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/4sqli/3hard/1.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>\n<p><img src=\"https://github.com/Eman993/Images_NS/blob/master/4sqli/3hard/5.jpg?raw=true\" alt=\"\" width=\"1280\" height=\"720\" /></p>","author":"Emanuele"}
